// Code generated by go generate; DO NOT EDIT.
// This file was generated at 2018 Aug 08 16:59:04 UTC

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package runes provides ...
package runes

// runes ...
type runes []rune

// New ...
func New(s []rune) runes {
	return runes(s)
}

// Map ...
func Map(s []rune, f func(s rune) rune) runes {
	m := runes(make([]rune, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// Map ...
func (s runes) Map(f func(s rune) rune) runes {
	return Map(s, f)
}

// Filter ...
func Filter(s []rune, f func(s rune) bool) runes {
	m := runes(make([]rune, 0, len(s)))
	for _, v := range s {
		if f(v) {
			m = append(m, v)
		}
	}
	return m
}

// Filter ...
func (s runes) Filter(f func(s rune) bool) runes {
	return Filter(s, f)
}

// Reduce ...
func Reduce(s []rune, f func(sum, value rune) rune, neutral rune) rune {
	res := neutral
	for _, e := range s {
		res = f(res, e)
	}
	return res
}

// Reduce ...
func (s runes) Reduce(f func(sum, value rune) rune, neutral rune) rune {
	return Reduce(s, f, neutral)
}

// Unique ...
func Unique(s []rune) runes {
	m := runes(make([]rune, 0, len(s)))
	seen := make(map[rune]struct{})
	for _, v := range s {
		if _, ok := seen[v]; !ok {
			m = append(m, v)
			seen[v] = struct{}{}
		}
	}
	return m
}

// Unique ...
func (s runes) Unique() runes {
	return Unique(s)
}
