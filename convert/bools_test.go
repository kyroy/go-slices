// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert_test

import (
	"fmt"
	"github.com/kyroy/go-slices/convert"
	"github.com/stretchr/testify/assert"
	"strconv"
	"testing"
)

var _ = fmt.Print
var _ = strconv.Atoi

func TestBoolsFloat32s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) float32
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) float32 {
					var y float32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.BoolsFloat32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsFloat32sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (float32, error) {
					var y float32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32
			got, _ = convert.BoolsFloat32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsFloat32sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (float32, error) {
					var y float32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.BoolsFloat32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsFloat64s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) float64
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) float64 {
					var y float64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.BoolsFloat64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsFloat64sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (float64, error) {
					var y float64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64
			got, _ = convert.BoolsFloat64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsFloat64sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (float64, error) {
					var y float64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.BoolsFloat64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInterfaces(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) interface{}
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) interface{} { return x },
			},
			want: []interface{}{false, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.BoolsInterfaces(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInterfacesE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (interface{}, error) { return x, nil },
			},
			want: []interface{}{false, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{}
			got, _ = convert.BoolsInterfacesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInterfacesF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (interface{}, error) { return x, nil },
			},
			want: []interface{}{false, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.BoolsInterfacesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt8s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) int8
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) int8 {
					var y int8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.BoolsInt8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt8sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int8, error) {
					var y int8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8
			got, _ = convert.BoolsInt8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt8sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int8, error) {
					var y int8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.BoolsInt8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt16s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) int16
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) int16 {
					var y int16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.BoolsInt16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt16sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int16, error) {
					var y int16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16
			got, _ = convert.BoolsInt16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt16sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int16, error) {
					var y int16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.BoolsInt16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt32s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) int32
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) int32 {
					var y int32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.BoolsInt32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt32sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int32, error) {
					var y int32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32
			got, _ = convert.BoolsInt32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt32sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int32, error) {
					var y int32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.BoolsInt32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt64s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) int64 {
					var y int64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.BoolsInt64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt64sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int64, error) {
					var y int64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64
			got, _ = convert.BoolsInt64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInt64sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int64, error) {
					var y int64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.BoolsInt64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint8s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) uint8
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) uint8 {
					var y uint8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.BoolsUint8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint8sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint8, error) {
					var y uint8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8
			got, _ = convert.BoolsUint8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint8sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint8, error) {
					var y uint8
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.BoolsUint8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint16s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) uint16
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) uint16 {
					var y uint16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.BoolsUint16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint16sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint16, error) {
					var y uint16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16
			got, _ = convert.BoolsUint16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint16sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint16, error) {
					var y uint16
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.BoolsUint16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint32s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) uint32
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) uint32 {
					var y uint32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.BoolsUint32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint32sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint32, error) {
					var y uint32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32
			got, _ = convert.BoolsUint32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint32sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint32, error) {
					var y uint32
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.BoolsUint32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint64s(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) uint64
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) uint64 {
					var y uint64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.BoolsUint64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint64sE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint64, error) {
					var y uint64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64
			got, _ = convert.BoolsUint64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUint64sF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint64, error) {
					var y uint64
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.BoolsUint64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsInts(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) int {
					var y int
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.BoolsInts(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsIntsE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int, error) {
					var y int
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int
			got, _ = convert.BoolsIntsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsIntsF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (int, error) {
					var y int
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.BoolsIntsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUints(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) uint
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) uint {
					var y uint
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.BoolsUints(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUintsE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint, error) {
					var y uint
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint
			got, _ = convert.BoolsUintsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsUintsF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (uint, error) {
					var y uint
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.BoolsUintsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsBytes(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) byte {
					var y byte
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.BoolsBytes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsBytesE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (byte, error) {
					var y byte
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte
			got, _ = convert.BoolsBytesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsBytesF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (byte, error) {
					var y byte
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.BoolsBytesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsRunes(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) rune
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) rune {
					var y rune
					if x {
						y = 2
					} else {
						y = 1
					}
					return y
				},
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.BoolsRunes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsRunesE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (rune, error) {
					var y rune
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune
			got, _ = convert.BoolsRunesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsRunesF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, true},
				f: func(x bool) (rune, error) {
					var y rune
					if x {
						y = 2
					} else {
						y = 1
					}
					return y, nil
				},
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.BoolsRunesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsStrings(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []bool{true, false},
				f: func(x bool) string { return fmt.Sprint(x) },
			},
			want: []string{"true", "false"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.BoolsStrings(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsStringsE(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []bool{true, false},
				f: func(x bool) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"true", "false"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string
			got, _ = convert.BoolsStringsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestBoolsStringsF(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []bool{true, false},
				f: func(x bool) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"true", "false"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.BoolsStringsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}
