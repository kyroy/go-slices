// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert_test

import (
	"fmt"
	"github.com/kyroy/go-slices/convert"
	"github.com/stretchr/testify/assert"
	"strconv"
	"testing"
)

var _ = fmt.Print
var _ = strconv.Atoi

func TestInt8sBools(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) bool { return x > 1 },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.Int8sBools(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sBoolsE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (bool, error) { return x > 1, nil },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool
			got, _ = convert.Int8sBoolsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sBoolsF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (bool, error) { return x > 1, nil },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.Int8sBoolsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat32s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) float32
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) float32 { return float32(x) },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.Int8sFloat32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat32sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (float32, error) { return float32(x), nil },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32
			got, _ = convert.Int8sFloat32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat32sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (float32, error) { return float32(x), nil },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.Int8sFloat32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat64s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) float64
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) float64 { return float64(x) },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.Int8sFloat64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat64sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (float64, error) { return float64(x), nil },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64
			got, _ = convert.Int8sFloat64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sFloat64sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (float64, error) { return float64(x), nil },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.Int8sFloat64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInterfaces(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) interface{}
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) interface{} { return int(x) },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.Int8sInterfaces(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInterfacesE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (interface{}, error) { return int(x), nil },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{}
			got, _ = convert.Int8sInterfacesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInterfacesF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (interface{}, error) { return int(x), nil },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.Int8sInterfacesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt16s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) int16
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) int16 { return int16(x) },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.Int8sInt16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt16sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int16, error) { return int16(x), nil },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16
			got, _ = convert.Int8sInt16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt16sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int16, error) { return int16(x), nil },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.Int8sInt16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt32s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) int32
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) int32 { return int32(x) },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.Int8sInt32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt32sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int32, error) { return int32(x), nil },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32
			got, _ = convert.Int8sInt32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt32sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int32, error) { return int32(x), nil },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.Int8sInt32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt64s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) int64 { return int64(x) },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.Int8sInt64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt64sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int64, error) { return int64(x), nil },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64
			got, _ = convert.Int8sInt64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInt64sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int64, error) { return int64(x), nil },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.Int8sInt64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint8s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) uint8
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) uint8 { return uint8(x) },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.Int8sUint8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint8sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint8, error) { return uint8(x), nil },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8
			got, _ = convert.Int8sUint8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint8sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint8, error) { return uint8(x), nil },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.Int8sUint8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint16s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) uint16
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) uint16 { return uint16(x) },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.Int8sUint16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint16sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint16, error) { return uint16(x), nil },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16
			got, _ = convert.Int8sUint16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint16sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint16, error) { return uint16(x), nil },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.Int8sUint16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint32s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) uint32
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) uint32 { return uint32(x) },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.Int8sUint32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint32sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint32, error) { return uint32(x), nil },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32
			got, _ = convert.Int8sUint32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint32sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint32, error) { return uint32(x), nil },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.Int8sUint32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint64s(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) uint64
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) uint64 { return uint64(x) },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.Int8sUint64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint64sE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint64, error) { return uint64(x), nil },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64
			got, _ = convert.Int8sUint64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUint64sF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint64, error) { return uint64(x), nil },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.Int8sUint64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sInts(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) int { return int(x) },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.Int8sInts(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sIntsE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int, error) { return int(x), nil },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int
			got, _ = convert.Int8sIntsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sIntsF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (int, error) { return int(x), nil },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.Int8sIntsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUints(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) uint
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) uint { return uint(x) },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.Int8sUints(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUintsE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint, error) { return uint(x), nil },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint
			got, _ = convert.Int8sUintsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sUintsF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (uint, error) { return uint(x), nil },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.Int8sUintsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sBytes(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) byte { return byte(x) },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.Int8sBytes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sBytesE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (byte, error) { return byte(x), nil },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte
			got, _ = convert.Int8sBytesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sBytesF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (byte, error) { return byte(x), nil },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.Int8sBytesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sRunes(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) rune
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) rune { return rune(x) },
			},
			want: []rune{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.Int8sRunes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sRunesE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (rune, error) { return rune(x), nil },
			},
			want: []rune{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune
			got, _ = convert.Int8sRunesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sRunesF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (rune, error) { return rune(x), nil },
			},
			want: []rune{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.Int8sRunesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sStrings(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) string { return fmt.Sprint(x) },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.Int8sStrings(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sStringsE(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string
			got, _ = convert.Int8sStringsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestInt8sStringsF(t *testing.T) {
	type args struct {
		s []int8
		f func(s int8) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []int8{1, 2, 3},
				f: func(x int8) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.Int8sStringsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}
