// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert

import (
	"github.com/kyroy/go-slices/bools"
	"github.com/kyroy/go-slices/float32s"
	"github.com/kyroy/go-slices/float64s"
	"github.com/kyroy/go-slices/interfaces"
	"github.com/kyroy/go-slices/int8s"
	"github.com/kyroy/go-slices/int16s"
	"github.com/kyroy/go-slices/int32s"
	"github.com/kyroy/go-slices/int64s"
	"github.com/kyroy/go-slices/uint8s"
	"github.com/kyroy/go-slices/uint16s"
	"github.com/kyroy/go-slices/uint32s"
	"github.com/kyroy/go-slices/uint64s"
	"github.com/kyroy/go-slices/ints"
	"github.com/kyroy/go-slices/uints"
	"github.com/kyroy/go-slices/bytes"
	"github.com/kyroy/go-slices/runes"
	"github.com/kyroy/go-slices/complex64s"
	"github.com/kyroy/go-slices/complex128s"
	"github.com/kyroy/go-slices/strings"
)

// UintptrsBools creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsBools(s []uintptr, f func(s uintptr) bool) bools.Bools {
	m := bools.Bools(make([]bool, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsFloat32s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsFloat32s(s []uintptr, f func(s uintptr) float32) float32s.Float32s {
	m := float32s.Float32s(make([]float32, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsFloat64s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsFloat64s(s []uintptr, f func(s uintptr) float64) float64s.Float64s {
	m := float64s.Float64s(make([]float64, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInterfaces creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInterfaces(s []uintptr, f func(s uintptr) interface{}) interfaces.Interfaces {
	m := interfaces.Interfaces(make([]interface{}, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInt8s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInt8s(s []uintptr, f func(s uintptr) int8) int8s.Int8s {
	m := int8s.Int8s(make([]int8, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInt16s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInt16s(s []uintptr, f func(s uintptr) int16) int16s.Int16s {
	m := int16s.Int16s(make([]int16, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInt32s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInt32s(s []uintptr, f func(s uintptr) int32) int32s.Int32s {
	m := int32s.Int32s(make([]int32, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInt64s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInt64s(s []uintptr, f func(s uintptr) int64) int64s.Int64s {
	m := int64s.Int64s(make([]int64, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsUint8s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsUint8s(s []uintptr, f func(s uintptr) uint8) uint8s.Uint8s {
	m := uint8s.Uint8s(make([]uint8, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsUint16s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsUint16s(s []uintptr, f func(s uintptr) uint16) uint16s.Uint16s {
	m := uint16s.Uint16s(make([]uint16, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsUint32s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsUint32s(s []uintptr, f func(s uintptr) uint32) uint32s.Uint32s {
	m := uint32s.Uint32s(make([]uint32, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsUint64s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsUint64s(s []uintptr, f func(s uintptr) uint64) uint64s.Uint64s {
	m := uint64s.Uint64s(make([]uint64, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsInts creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsInts(s []uintptr, f func(s uintptr) int) ints.Ints {
	m := ints.Ints(make([]int, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsUints creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsUints(s []uintptr, f func(s uintptr) uint) uints.Uints {
	m := uints.Uints(make([]uint, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsBytes creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsBytes(s []uintptr, f func(s uintptr) byte) bytes.Bytes {
	m := bytes.Bytes(make([]byte, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsRunes creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsRunes(s []uintptr, f func(s uintptr) rune) runes.Runes {
	m := runes.Runes(make([]rune, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsComplex64s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsComplex64s(s []uintptr, f func(s uintptr) complex64) complex64s.Complex64s {
	m := complex64s.Complex64s(make([]complex64, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsComplex128s creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsComplex128s(s []uintptr, f func(s uintptr) complex128) complex128s.Complex128s {
	m := complex128s.Complex128s(make([]complex128, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// UintptrsStrings creates a new slice with the results of calling the provided function on every element in the given array.
func UintptrsStrings(s []uintptr, f func(s uintptr) string) strings.Strings {
	m := strings.Strings(make([]string, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}
