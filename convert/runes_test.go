// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert_test

import (
	"fmt"
	"github.com/kyroy/go-slices/convert"
	"github.com/stretchr/testify/assert"
	"strconv"
	"testing"
)

var _ = fmt.Print
var _ = strconv.Atoi

func TestRunesBools(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) bool { return x > 1 },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.RunesBools(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesBoolsE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (bool, error) { return x > 1, nil },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool
			got, _ = convert.RunesBoolsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesBoolsF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (bool, error) { return x > 1, nil },
			},
			want: []bool{false, true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.RunesBoolsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat32s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) float32
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) float32 { return float32(x) },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.RunesFloat32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat32sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (float32, error) { return float32(x), nil },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32
			got, _ = convert.RunesFloat32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat32sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (float32, error) { return float32(x), nil },
			},
			want: []float32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.RunesFloat32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat64s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) float64
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) float64 { return float64(x) },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.RunesFloat64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat64sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (float64, error) { return float64(x), nil },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64
			got, _ = convert.RunesFloat64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesFloat64sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (float64, error) { return float64(x), nil },
			},
			want: []float64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.RunesFloat64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInterfaces(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) interface{}
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) interface{} { return int(x) },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.RunesInterfaces(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInterfacesE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (interface{}, error) { return int(x), nil },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{}
			got, _ = convert.RunesInterfacesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInterfacesF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (interface{}, error) { return int(x), nil },
			},
			want: []interface{}{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.RunesInterfacesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt8s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) int8
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) int8 { return int8(x) },
			},
			want: []int8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.RunesInt8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt8sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int8, error) { return int8(x), nil },
			},
			want: []int8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8
			got, _ = convert.RunesInt8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt8sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int8, error) { return int8(x), nil },
			},
			want: []int8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.RunesInt8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt16s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) int16
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) int16 { return int16(x) },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.RunesInt16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt16sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int16, error) { return int16(x), nil },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16
			got, _ = convert.RunesInt16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt16sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int16, error) { return int16(x), nil },
			},
			want: []int16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.RunesInt16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt32s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) int32
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) int32 { return int32(x) },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.RunesInt32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt32sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int32, error) { return int32(x), nil },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32
			got, _ = convert.RunesInt32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt32sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int32, error) { return int32(x), nil },
			},
			want: []int32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.RunesInt32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt64s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) int64 { return int64(x) },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.RunesInt64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt64sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int64, error) { return int64(x), nil },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64
			got, _ = convert.RunesInt64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInt64sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int64, error) { return int64(x), nil },
			},
			want: []int64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.RunesInt64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint8s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) uint8
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) uint8 { return uint8(x) },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.RunesUint8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint8sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint8, error) { return uint8(x), nil },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8
			got, _ = convert.RunesUint8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint8sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint8, error) { return uint8(x), nil },
			},
			want: []uint8{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.RunesUint8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint16s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) uint16
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) uint16 { return uint16(x) },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.RunesUint16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint16sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint16, error) { return uint16(x), nil },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16
			got, _ = convert.RunesUint16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint16sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint16, error) { return uint16(x), nil },
			},
			want: []uint16{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.RunesUint16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint32s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) uint32
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) uint32 { return uint32(x) },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.RunesUint32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint32sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint32, error) { return uint32(x), nil },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32
			got, _ = convert.RunesUint32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint32sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint32, error) { return uint32(x), nil },
			},
			want: []uint32{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.RunesUint32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint64s(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) uint64
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) uint64 { return uint64(x) },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.RunesUint64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint64sE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint64, error) { return uint64(x), nil },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64
			got, _ = convert.RunesUint64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUint64sF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint64, error) { return uint64(x), nil },
			},
			want: []uint64{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.RunesUint64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesInts(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) int { return int(x) },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.RunesInts(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesIntsE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int, error) { return int(x), nil },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int
			got, _ = convert.RunesIntsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesIntsF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (int, error) { return int(x), nil },
			},
			want: []int{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.RunesIntsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUints(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) uint
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) uint { return uint(x) },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.RunesUints(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUintsE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint, error) { return uint(x), nil },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint
			got, _ = convert.RunesUintsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesUintsF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (uint, error) { return uint(x), nil },
			},
			want: []uint{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.RunesUintsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesBytes(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) byte { return byte(x) },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.RunesBytes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesBytesE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (byte, error) { return byte(x), nil },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte
			got, _ = convert.RunesBytesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesBytesF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (byte, error) { return byte(x), nil },
			},
			want: []byte{1, 2, 3},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.RunesBytesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesStrings(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) string { return fmt.Sprint(x) },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.RunesStrings(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesStringsE(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string
			got, _ = convert.RunesStringsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestRunesStringsF(t *testing.T) {
	type args struct {
		s []rune
		f func(s rune) (string, error)
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []rune{1, 2, 3},
				f: func(x rune) (string, error) { return fmt.Sprint(x), nil },
			},
			want: []string{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = convert.RunesStringsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}
