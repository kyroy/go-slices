// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert_test

import (
	"fmt"
	"github.com/kyroy/go-slices/convert"
	"github.com/stretchr/testify/assert"
	"strconv"
	"testing"
)

var _ = fmt.Print
var _ = strconv.Atoi

func TestStringsBools(t *testing.T) {
	type args struct {
		s []string
		f func(s string) bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []string{"true", "false"},
				f: func(x string) bool { b, _ := strconv.ParseBool(x); return b },
			},
			want: []bool{true, false},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.StringsBools(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsBoolsE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []string{"true", "false"},
				f: func(x string) (bool, error) { b, _ := strconv.ParseBool(x); return b, nil },
			},
			want: []bool{true, false},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool
			got, _ = convert.StringsBoolsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsBoolsF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (bool, error)
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []string{"true", "false"},
				f: func(x string) (bool, error) { b, _ := strconv.ParseBool(x); return b, nil },
			},
			want: []bool{true, false},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = convert.StringsBoolsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat32s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) float32
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) float32 { n, _ := strconv.ParseFloat(x, 32); return float32(n) },
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.StringsFloat32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat32sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (float32, error) { n, _ := strconv.ParseFloat(x, 32); return float32(n), nil },
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32
			got, _ = convert.StringsFloat32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat32sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (float32, error)
	}
	tests := []struct {
		name string
		args args
		want []float32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (float32, error) { n, _ := strconv.ParseFloat(x, 32); return float32(n), nil },
			},
			want: []float32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float32 = convert.StringsFloat32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat64s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) float64
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) float64 { n, _ := strconv.ParseFloat(x, 64); return n },
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.StringsFloat64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat64sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (float64, error) { n, _ := strconv.ParseFloat(x, 64); return n, nil },
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64
			got, _ = convert.StringsFloat64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsFloat64sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (float64, error)
	}
	tests := []struct {
		name string
		args args
		want []float64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (float64, error) { n, _ := strconv.ParseFloat(x, 64); return n, nil },
			},
			want: []float64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []float64 = convert.StringsFloat64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInterfaces(t *testing.T) {
	type args struct {
		s []string
		f func(s string) interface{}
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2", "3"},
				f: func(x string) interface{} { return x },
			},
			want: []interface{}{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.StringsInterfaces(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInterfacesE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2", "3"},
				f: func(x string) (interface{}, error) { return x, nil },
			},
			want: []interface{}{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{}
			got, _ = convert.StringsInterfacesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInterfacesF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (interface{}, error)
	}
	tests := []struct {
		name string
		args args
		want []interface{}
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2", "3"},
				f: func(x string) (interface{}, error) { return x, nil },
			},
			want: []interface{}{"1", "2", "3"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []interface{} = convert.StringsInterfacesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt8s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) int8
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) int8 { n, _ := strconv.Atoi(x); return int8(n) },
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.StringsInt8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt8sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int8, error) { n, _ := strconv.Atoi(x); return int8(n), nil },
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8
			got, _ = convert.StringsInt8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt8sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int8, error)
	}
	tests := []struct {
		name string
		args args
		want []int8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int8, error) { n, _ := strconv.Atoi(x); return int8(n), nil },
			},
			want: []int8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int8 = convert.StringsInt8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt16s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) int16
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) int16 { n, _ := strconv.Atoi(x); return int16(n) },
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.StringsInt16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt16sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int16, error) { n, _ := strconv.Atoi(x); return int16(n), nil },
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16
			got, _ = convert.StringsInt16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt16sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int16, error)
	}
	tests := []struct {
		name string
		args args
		want []int16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int16, error) { n, _ := strconv.Atoi(x); return int16(n), nil },
			},
			want: []int16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int16 = convert.StringsInt16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt32s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) int32
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) int32 { n, _ := strconv.Atoi(x); return int32(n) },
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.StringsInt32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt32sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int32, error) { n, _ := strconv.Atoi(x); return int32(n), nil },
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32
			got, _ = convert.StringsInt32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt32sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int32, error)
	}
	tests := []struct {
		name string
		args args
		want []int32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int32, error) { n, _ := strconv.Atoi(x); return int32(n), nil },
			},
			want: []int32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int32 = convert.StringsInt32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt64s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) int64 { n, _ := strconv.Atoi(x); return int64(n) },
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.StringsInt64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt64sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int64, error) { n, _ := strconv.Atoi(x); return int64(n), nil },
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64
			got, _ = convert.StringsInt64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInt64sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int64, error)
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int64, error) { n, _ := strconv.Atoi(x); return int64(n), nil },
			},
			want: []int64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int64 = convert.StringsInt64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint8s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) uint8
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) uint8 { n, _ := strconv.Atoi(x); return uint8(n) },
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.StringsUint8s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint8sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint8, error) { n, _ := strconv.Atoi(x); return uint8(n), nil },
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8
			got, _ = convert.StringsUint8sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint8sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint8, error)
	}
	tests := []struct {
		name string
		args args
		want []uint8
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint8, error) { n, _ := strconv.Atoi(x); return uint8(n), nil },
			},
			want: []uint8{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint8 = convert.StringsUint8sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint16s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) uint16
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) uint16 { n, _ := strconv.Atoi(x); return uint16(n) },
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.StringsUint16s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint16sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint16, error) { n, _ := strconv.Atoi(x); return uint16(n), nil },
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16
			got, _ = convert.StringsUint16sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint16sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint16, error)
	}
	tests := []struct {
		name string
		args args
		want []uint16
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint16, error) { n, _ := strconv.Atoi(x); return uint16(n), nil },
			},
			want: []uint16{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint16 = convert.StringsUint16sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint32s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) uint32
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) uint32 { n, _ := strconv.Atoi(x); return uint32(n) },
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.StringsUint32s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint32sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint32, error) { n, _ := strconv.Atoi(x); return uint32(n), nil },
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32
			got, _ = convert.StringsUint32sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint32sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint32, error)
	}
	tests := []struct {
		name string
		args args
		want []uint32
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint32, error) { n, _ := strconv.Atoi(x); return uint32(n), nil },
			},
			want: []uint32{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint32 = convert.StringsUint32sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint64s(t *testing.T) {
	type args struct {
		s []string
		f func(s string) uint64
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) uint64 { n, _ := strconv.Atoi(x); return uint64(n) },
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.StringsUint64s(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint64sE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint64, error) { n, _ := strconv.Atoi(x); return uint64(n), nil },
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64
			got, _ = convert.StringsUint64sE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUint64sF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint64, error)
	}
	tests := []struct {
		name string
		args args
		want []uint64
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint64, error) { n, _ := strconv.Atoi(x); return uint64(n), nil },
			},
			want: []uint64{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint64 = convert.StringsUint64sF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsInts(t *testing.T) {
	type args struct {
		s []string
		f func(s string) int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) int { n, _ := strconv.Atoi(x); return n },
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.StringsInts(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsIntsE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int, error) { n, _ := strconv.Atoi(x); return n, nil },
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int
			got, _ = convert.StringsIntsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsIntsF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (int, error)
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (int, error) { n, _ := strconv.Atoi(x); return n, nil },
			},
			want: []int{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []int = convert.StringsIntsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUints(t *testing.T) {
	type args struct {
		s []string
		f func(s string) uint
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) uint { n, _ := strconv.Atoi(x); return uint(n) },
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.StringsUints(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUintsE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint, error) { n, _ := strconv.Atoi(x); return uint(n), nil },
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint
			got, _ = convert.StringsUintsE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsUintsF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (uint, error)
	}
	tests := []struct {
		name string
		args args
		want []uint
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (uint, error) { n, _ := strconv.Atoi(x); return uint(n), nil },
			},
			want: []uint{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []uint = convert.StringsUintsF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsBytes(t *testing.T) {
	type args struct {
		s []string
		f func(s string) byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) byte { n, _ := strconv.Atoi(x); return byte(n) },
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.StringsBytes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsBytesE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (byte, error) { n, _ := strconv.Atoi(x); return byte(n), nil },
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte
			got, _ = convert.StringsBytesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsBytesF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (byte, error)
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (byte, error) { n, _ := strconv.Atoi(x); return byte(n), nil },
			},
			want: []byte{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []byte = convert.StringsBytesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsRunes(t *testing.T) {
	type args struct {
		s []string
		f func(s string) rune
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) rune { n, _ := strconv.Atoi(x); return rune(n) },
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.StringsRunes(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsRunesE(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (rune, error) { n, _ := strconv.Atoi(x); return rune(n), nil },
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune
			got, _ = convert.StringsRunesE(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestStringsRunesF(t *testing.T) {
	type args struct {
		s []string
		f func(s string) (rune, error)
	}
	tests := []struct {
		name string
		args args
		want []rune
	}{
		{
			name: "basic",
			args: args{
				s: []string{"1", "2"},
				f: func(x string) (rune, error) { n, _ := strconv.Atoi(x); return rune(n), nil },
			},
			want: []rune{1, 2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []rune = convert.StringsRunesF(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}
