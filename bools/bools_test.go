// Code generated by go generate; DO NOT EDIT.
// This file was generated at 2018 Aug 08 16:59:04 UTC

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bools_test

import (
	"github.com/kyroy/go-slices/bools"
	"github.com/stretchr/testify/assert"
	"testing"
	"fmt"
)

var _ = fmt.Print

func TestMap(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []bool{true, false, true},
				f: func(x bool) bool { return !x },
			},
			want: []bool{false, true, false},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = bools.Map(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
			got = bools.New(tt.args.s).Map(tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFilter(t *testing.T) {
	type args struct {
		s []bool
		f func(s bool) bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []bool{true, false, true},
				f: func(x bool) bool { return x },
			},
			want: []bool{true, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = bools.Filter(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
			got = bools.New(tt.args.s).Filter(tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestReduce(t *testing.T) {
	type args struct {
		s       []bool
		f       func(sum, value bool) bool
		neutral bool
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "and_false",
			args: args{
				s:       []bool{true, false, true},
				f:       func(sum, value bool) bool { return sum && value },
				neutral: true,
			},
			want: false,
		},{
			name: "and_true",
			args: args{
				s:       []bool{true, true, true},
				f:       func(sum, value bool) bool { return sum && value },
				neutral: true,
			},
			want: true,
		},{
			name: "or_true",
			args: args{
				s:       []bool{false, false, true},
				f:       func(sum, value bool) bool { return sum || value },
				neutral: false,
			},
			want: true,
		},{
			name: "or_false",
			args: args{
				s:       []bool{false, false, false},
				f:       func(sum, value bool) bool { return sum || value },
				neutral: false,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got bool = bools.Reduce(tt.args.s, tt.args.f, tt.args.neutral)
			assert.Equal(t, tt.want, got)
			got = bools.New(tt.args.s).Reduce(tt.args.f, tt.args.neutral)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestUnique(t *testing.T) {
	type args struct {
		s []bool
	}
	tests := []struct {
		name string
		args args
		want []bool
	}{
		{
			name: "basic",
			args: args{
				s: []bool{false, false, true, true},
			},
			want: []bool{false, true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []bool = bools.Unique(tt.args.s)
			assert.Equal(t, tt.want, got)
			got = bools.New(tt.args.s).Unique()
			assert.Equal(t, tt.want, got)
		})
	}
}
