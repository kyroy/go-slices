// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at 2018 Aug 08 10:53:47 UTC

// Package flt64slice provides ...
package flt64slice

// floats64 ...
type floats64 []float64

// Map ...
func Map(s []float64, f func(s float64) float64) floats64 {
	m := floats64(make([]float64, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// Map ...
func (s floats64) Map(f func(s float64) float64) floats64 {
	return Map(s, f)
}

// Filter ...
func Filter(s []float64, f func(s float64) bool) floats64 {
	m := floats64(make([]float64, 0, len(s)))
	for _, v := range s {
		if f(v) {
			m = append(m, v)
		}
	}
	return m
}

// Filter ...
func (s floats64) Filter(f func(s float64) bool) floats64 {
	return Filter(s, f)
}

// Reduce ...
func Reduce(s []float64, f func(sum, value float64) float64, neutral float64) float64 {
	res := neutral
	for _, e := range s {
		res = f(res, e)
	}
	return res
}

// Reduce ...
func (s floats64) Reduce(f func(sum, value float64) float64, neutral float64) float64 {
	return Reduce(s, f, neutral)
}

// Unique ...
func Unique(s []float64) floats64 {
	m := floats64(make([]float64, 0, len(s)))
	seen := make(map[float64]struct{})
	for _, v := range s {
		if _, ok := seen[v]; !ok {
			m = append(m, v)
			seen[v] = struct{}{}
		}
	}
	return m
}

// Unique ...
func (s floats64) Unique() floats64 {
	return Unique(s)
}
