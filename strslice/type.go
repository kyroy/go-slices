// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at 2018 Aug 08 10:53:47 UTC

// Package strslice provides ...
package strslice

// strings ...
type strings []string

// Map ...
func Map(s []string, f func(s string) string) strings {
	m := strings(make([]string, len(s)))
	for i, v := range s {
		m[i] = f(v)
	}
	return m
}

// Map ...
func (s strings) Map(f func(s string) string) strings {
	return Map(s, f)
}

// Filter ...
func Filter(s []string, f func(s string) bool) strings {
	m := strings(make([]string, 0, len(s)))
	for _, v := range s {
		if f(v) {
			m = append(m, v)
		}
	}
	return m
}

// Filter ...
func (s strings) Filter(f func(s string) bool) strings {
	return Filter(s, f)
}

// Reduce ...
func Reduce(s []string, f func(sum, value string) string, neutral string) string {
	res := neutral
	for _, e := range s {
		res = f(res, e)
	}
	return res
}

// Reduce ...
func (s strings) Reduce(f func(sum, value string) string, neutral string) string {
	return Reduce(s, f, neutral)
}

// Unique ...
func Unique(s []string) strings {
	m := strings(make([]string, 0, len(s)))
	seen := make(map[string]struct{})
	for _, v := range s {
		if _, ok := seen[v]; !ok {
			m = append(m, v)
			seen[v] = struct{}{}
		}
	}
	return m
}

// Unique ...
func (s strings) Unique() strings {
	return Unique(s)
}
