// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package strings_test

import (
	"fmt"
	"github.com/kyroy/go-slices/strings"
	"github.com/stretchr/testify/assert"
	"testing"
)

var _ = fmt.Print

func TestMap(t *testing.T) {
	type args struct {
		s []string
		f func(s string) string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []string{"a", "b", "c", "d"},
				f: func(x string) string { return x + "!" },
			},
			want: []string{"a!", "b!", "c!", "d!"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = strings.Map(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
			got = strings.New(tt.args.s).Map(tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFilter(t *testing.T) {
	type args struct {
		s []string
		f func(s string) bool
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []string{"a", "b", "c", "d"},
				f: func(x string) bool { return x > "b" },
			},
			want: []string{"c", "d"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = strings.Filter(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
			got = strings.New(tt.args.s).Filter(tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestReduce(t *testing.T) {
	type args struct {
		s       []string
		f       func(sum, value string) string
		neutral string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "basic",
			args: args{
				s:       []string{"a", "b", "c", "d"},
				f:       func(sum, value string) string { return sum + value },
				neutral: "",
			},
			want: "abcd",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got string = strings.Reduce(tt.args.s, tt.args.f, tt.args.neutral)
			assert.Equal(t, tt.want, got)
			got = strings.New(tt.args.s).Reduce(tt.args.f, tt.args.neutral)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestUnique(t *testing.T) {
	type args struct {
		s []string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "basic",
			args: args{
				s: []string{"a", "b", "a", "c", "c", "d"},
			},
			want: []string{"a", "b", "c", "d"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = strings.Unique(tt.args.s)
			assert.Equal(t, tt.want, got)
			got = strings.New(tt.args.s).Unique()
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestIntersect(t *testing.T) {
	type args struct {
		s    []string
		more [][]string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "same",
			args: args{
				s: []string{"a", "b", "c", "a"},
				more: [][]string{{"a", "b", "c", "a"}},
			},
			want: []string{"a", "b", "c", "a"},
		},{
			name: "multiple",
			args: args{
				s: []string{"a", "b", "c", "a"},
				more: [][]string{{"a", "b", "a"}, {"b", "a"}},
			},
			want: []string{"a", "b"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []string = strings.Intersect(tt.args.s, tt.args.more...)
			assert.ElementsMatch(t, tt.want, got)
			got = strings.New(tt.args.s).Intersect(tt.args.more...)
			assert.ElementsMatch(t, tt.want, got)
		})
	}
}
