types:
- package: strings
  type: string
examples:
  Map:
    in: |-
      ([]<TYPE>{"a", "b"}, func(s <TYPE>) <TYPE> {
            return s + "!"
          })
    out: '[a! b!]'
tests:
  map:
  - name: basic
    in: '{"a", "b", "c", "d"}'
    func: '{ return x + "!" }'
    out: '{"a!", "b!", "c!", "d!"}'
  filter:
  - name: basic
    in: '{"a", "b", "c", "d"}'
    func: '{ return x > "b" }'
    out: '{"c", "d"}'
  reduce:
  - name: basic
    in: '{"a", "b", "c", "d"}'
    func: '{ return sum + value }'
    neutral: '""'
    out: '"abcd"'
  unique:
  - name: basic
    in: '{"a", "b", "a", "c", "c", "d"}'
    out: '{"a", "b", "c", "d"}'
  intersect:
  - name: same
    in: '{"a", "b", "c", "a"}'
    more: '{{"a", "b", "c", "a"}}'
    out: '{"a", "b", "c", "a"}'
  - name: multiple
    in: '{"a", "b", "c", "a"}'
    more: '{{"a", "b", "a"}, {"b", "a"}}'
    out: '{"a", "b"}'
  contains:
  - name: contains
    in: '{"a", "b", "c", "a"}'
    elem: '"b"'
    out: 'true'
  - name: not_contains
    in: '{"a", "b", "c", "a"}'
    elem: '"d"'
    out: 'false'
  indexof:
  - name: contains
    in: '{"a", "b", "c", "a"}'
    elem: '"b"'
    out: '1'
  - name: not_contains
    in: '{"a", "b", "c", "a"}'
    elem: '"d"'
    out: '-1'
  find:
  - name: contains
    in: '{"a", "b", "c", "a"}'
    func: '{ return x > "a" }'
    out: '"b"'
    found: true
  - name: not_contains
    in: '{"a", "b", "c", "a"}'
    func: '{ return x < "a" }'
    out: '"x"'
    found: false
  convert:
    bools:
    - name: basic
      in: '{"true", "false"}'
      func: 'b, _ := strconv.ParseBool(x); return b'
      out: '{true, false}'
    interfaces:
    - name: basic
      in: '{"1", "2", "3"}'
      func: 'return x'
      out: '{"1", "2", "3"}'
    float32s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.ParseFloat(x, 32); return float32(n)'
      out: '{1, 2}'
    float64s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.ParseFloat(x, 64); return n'
      out: '{1, 2}'
    ints:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return n'
      out: '{1, 2}'
    int8s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return int8(n)'
      out: '{1, 2}'
    int16s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return int16(n)'
      out: '{1, 2}'
    int32s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return int32(n)'
      out: '{1, 2}'
    int64s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return int64(n)'
      out: '{1, 2}'
    uints:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return uint(n)'
      out: '{1, 2}'
    uint8s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return uint8(n)'
      out: '{1, 2}'
    uint16s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return uint16(n)'
      out: '{1, 2}'
    uint32s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return uint32(n)'
      out: '{1, 2}'
    uint64s:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return uint64(n)'
      out: '{1, 2}'
    bytes:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return byte(n)'
      out: '{1, 2}'
    runes:
    - name: basic
      in: '{"1", "2"}'
      func: 'n, _ := strconv.Atoi(x); return rune(n)'
      out: '{1, 2}'
