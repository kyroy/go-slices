types:
# the set of all signed  8-bit integers (-128 to 127)
- package: int8s
  type: int8
# the set of all signed 16-bit integers (-32768 to 32767)
- package: int16s
  type: int16
# the set of all signed 32-bit integers (-2147483648 to 2147483647)
- package: int32s
  type: int32
# the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)
- package: int64s
  type: int64
# the set of all unsigned  8-bit integers (0 to 255)
- package: uint8s
  type: uint8
# the set of all unsigned 16-bit integers (0 to 65535)
- package: uint16s
  type: uint16
# the set of all unsigned 32-bit integers (0 to 4294967295)
- package: uint32s
  type: uint32
# the set of all unsigned 64-bit integers (0 to 18446744073709551615)
- package: uint64s
  type: uint64
# either 32 or 64 bits
- package: ints
  type: int
# either 32 or 64 bits
- package: uints
  type: uint
# alias for uint8
- package: bytes
  type: byte
# alias for int32
- package: runes
  type: rune
examples:
  Map:
    in: |-
      ([]<TYPE>{1, 2, 3, 4}, func(x <TYPE>) <TYPE> {
            return 2 * x
          })
    out: '[2 4 6 8]'
  Filter:
    in: |-
      ([]<TYPE>{1, 2, 3, 4}, func(x <TYPE>) bool {
            return x % 2 == 0
          })
    out: '[2 4]'
  Reduce:
    in: |-
      ([]<TYPE>{1, 2, 3, 4}, func(x, y <TYPE>) <TYPE> {
            return x + y
          }, 0)
    out: '10'
  Unique:
    in: |-
      ([]<TYPE>{1, 2, 1, 3, 2, 4})
    out: '[1 2 3 4]'
  Intersect:
    in: |-
      ([]<TYPE>{1, 2, 3, 3}, []<TYPE>{3, 2, 3}, []<TYPE>{3, 4, 3})
    out: '[3 3]'
tests:
  map:
  - name: basic
    in: '{1, 3, 4, 6}'
    func: '{ return x + 1 }'
    out: '{2, 4, 5, 7}'
  filter:
  - name: basic
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 1 && x < 4 }'
    out: '{2, 3, 2}'
  reduce:
  - name: basic
    in: '{1, 3, 4}'
    func: '{ return sum + value }'
    neutral: '0'
    out: '8'
  unique:
  - name: basic
    in: '{1, 3, 4, 6, 3, 2, 1}'
    out: '{1, 3, 4, 6, 2}'
  intersect:
  - name: same
    in: '{1, 2, 3, 4}'
    more: '{{1, 2, 3, 4}}'
    out: '{1, 2, 3, 4}'
  - name: multiple
    in: '{1, 1, 2, 1, 3, 5, 4}'
    more: '{{1, 2, 2, 3, 1}, {1, 2, 1, 5, 4}}'
    out: '{1, 1, 2}'
  contains:
  - name: contains
    in: '{1, 2, 3, 4}'
    elem: '3'
    out: 'true'
  - name: not_contains
    in: '{1, 1, 2, 1, 3, 5, 4}'
    elem: '0'
    out: 'false'
  indexof:
  - name: contains
    in: '{1, 2, 3, 4}'
    elem: '3'
    out: '2'
  - name: not_contains
    in: '{1, 1, 2, 1, 3, 5, 4}'
    elem: '0'
    out: '-1'
  find:
  - name: contains
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 1 && x < 4 }'
    out: '2'
    found: true
  - name: not_contains
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 5 }'
    out: '0'
    found: false
  convert:
    strings:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return fmt.Sprint(x)'
      out: '{"1", "2", "3"}'
    bools:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return x > 1'
      out: '{false, true, true}'
    interfaces:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int(x)'
      out: '{1, 2, 3}'
    float32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return float32(x)'
      out: '{1, 2, 3}'
    float64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return float64(x)'
      out: '{1, 2, 3}'
    ints:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int(x)'
      out: '{1, 2, 3}'
    int8s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int8(x)'
      out: '{1, 2, 3}'
    int16s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int16(x)'
      out: '{1, 2, 3}'
    int32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int32(x)'
      out: '{1, 2, 3}'
    int64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int64(x)'
      out: '{1, 2, 3}'
    uints:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint(x)'
      out: '{1, 2, 3}'
    uint8s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint8(x)'
      out: '{1, 2, 3}'
    uint16s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint16(x)'
      out: '{1, 2, 3}'
    uint32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint32(x)'
      out: '{1, 2, 3}'
    uint64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint64(x)'
      out: '{1, 2, 3}'
    bytes:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return byte(x)'
      out: '{1, 2, 3}'
    runes:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return rune(x)'
      out: '{1, 2, 3}'
    
