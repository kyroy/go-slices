types:
# the set of all IEEE-754 32-bit floating-point numbers
- package: float32s
  type: float32
# the set of all IEEE-754 64-bit floating-point numbers
- package: float64s
  type: float64
examples:
  Map:
    in: |-
      ([]<TYPE>{1, 2, 3}, func(x <TYPE>) <TYPE> {
            return 2 * x
          })
    out: '[2 4 6]'
tests:
  map:
  - name: basic
    in: '{1, 3, 4, 6}'
    func: '{ return x + 1 }'
    out: '{2, 4, 5, 7}'
  filter:
  - name: basic
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 1 && x < 4 }'
    out: '{2, 3, 2}'
  reduce:
  - name: basic
    in: '{1, 3, 4}'
    func: '{ return sum + value }'
    neutral: '0'
    out: '8'
  unique:
  - name: basic
    in: '{1, 3, 4, 6, 3, 2, 1}'
    out: '{1, 3, 4, 6, 2}'
  intersect:
  - name: same
    in: '{1, 2, 3, 4}'
    more: '{{1, 2, 3, 4}}'
    out: '{1, 2, 3, 4}'
  - name: multiple
    in: '{1, 1, 2, 1, 3, 5, 4}'
    more: '{{1, 2, 2, 3, 1}, {1, 2, 1, 5, 4}}'
    out: '{1, 1, 2}'
  contains:
  - name: contains
    in: '{1, 2, 3, 4}'
    elem: '3'
    out: 'true'
  - name: not_contains
    in: '{1, 1, 2, 1, 3, 5, 4}'
    elem: '0'
    out: 'false'
  indexof:
  - name: contains
    in: '{1, 2, 3, 4}'
    elem: '3'
    out: '2'
  - name: not_contains
    in: '{1, 1, 2, 1, 3, 5, 4}'
    elem: '0'
    out: '-1'
  find:
  - name: contains
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 1 && x < 4 }'
    out: '2'
    found: true
  - name: not_contains
    in: '{1, 2, 3, 4, 2}'
    func: '{ return x > 5 }'
    out: '0'
    found: false
  convert:
    strings:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return fmt.Sprint(x)'
      out: '{"1", "2", "3"}'
    bools:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return x > 1'
      out: '{false, true, true}'
    interfaces:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return float64(x)'
      out: '{1., 2., 3.}'
    float32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return float32(x)'
      out: '{1, 2, 3}'
    float64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return float64(x)'
      out: '{1, 2, 3}'
    ints:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int(x)'
      out: '{1, 2, 3}'
    int8s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int8(x)'
      out: '{1, 2, 3}'
    int16s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int16(x)'
      out: '{1, 2, 3}'
    int32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int32(x)'
      out: '{1, 2, 3}'
    int64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return int64(x)'
      out: '{1, 2, 3}'
    uints:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint(x)'
      out: '{1, 2, 3}'
    uint8s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint8(x)'
      out: '{1, 2, 3}'
    uint16s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint16(x)'
      out: '{1, 2, 3}'
    uint32s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint32(x)'
      out: '{1, 2, 3}'
    uint64s:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return uint64(x)'
      out: '{1, 2, 3}'
    bytes:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return byte(x)'
      out: '{1, 2, 3}'
    runes:
    - name: basic
      in: '{1, 2, 3}'
      func: 'return rune(x)'
      out: '{1, 2, 3}'
