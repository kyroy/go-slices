// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package internal

import (
	"text/template"
)

// ConvertTestTemplate is the template to generate convert/convert_test.go
var ConvertTestTemplate = template.Must(template.New("convert_test.go").Funcs(funcMap).Parse(`// Code generated by go generate; DO NOT EDIT.

// Copyright 2018 Dennis Kuhnert
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package convert_test

import (
	"fmt"
	"github.com/kyroy/go-slices/convert"
	"github.com/stretchr/testify/assert"
	"strconv"
	"testing"
)

var _ = fmt.Print
var _ = strconv.Atoi
{{ range $t2 := .Other }}{{ if not (eq $.Package $t2.Package) }}{{ if gt (len (index $.Tests $t2.Package)) 0 }}
func Test{{ $.Package | Title }}{{ $t2.Package | Title }}(t *testing.T) {
	type args struct {
		s []{{ $.Type }}
		f func(s {{ $.Type }}) {{ $t2.Type }}
	}
	tests := []struct {
		name string
		args args
		want []{{ $t2.Type }}
	}{
		{{ range (index $.Tests $t2.Package) }}{
			name: "{{ .Name }}",
			args: args{
				s: []{{ $.Type }}{{ .In }},
				f: func(x {{ $.Type }}) {{ $t2.Type }} { {{ .Func }} },
			},
			want: []{{ $t2.Type }}{{ .Out }},
		},{{end}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []{{ $t2.Type }} = convert.{{ $.Package | Title }}{{ $t2.Package | Title }}(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test{{ $.Package | Title }}{{ $t2.Package | Title }}E(t *testing.T) {
	type args struct {
		s []{{ $.Type }}
		f func(s {{ $.Type }}) ({{ $t2.Type }}, error)
	}
	tests := []struct {
		name string
		args args
		want []{{ $t2.Type }}
	}{
		{{ range (index $.Tests $t2.Package) }}{
			name: "{{ .Name }}",
			args: args{
				s: []{{ $.Type }}{{ .In }},
				f: func(x {{ $.Type }}) ({{ $t2.Type }}, error) { {{ .Func }}, nil },
			},
			want: []{{ $t2.Type }}{{ .Out }},
		},{{end}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []{{ $t2.Type }}
			got, _ = convert.{{ $.Package | Title }}{{ $t2.Package | Title }}E(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test{{ $.Package | Title }}{{ $t2.Package | Title }}F(t *testing.T) {
	type args struct {
		s []{{ $.Type }}
		f func(s {{ $.Type }}) ({{ $t2.Type }}, error)
	}
	tests := []struct {
		name string
		args args
		want []{{ $t2.Type }}
	}{
		{{ range (index $.Tests $t2.Package) }}{
			name: "{{ .Name }}",
			args: args{
				s: []{{ $.Type }}{{ .In }},
				f: func(x {{ $.Type }}) ({{ $t2.Type }}, error) { {{ .Func }}, nil },
			},
			want: []{{ $t2.Type }}{{ .Out }},
		},{{end}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var got []{{ $t2.Type }} = convert.{{ $.Package | Title }}{{ $t2.Package | Title }}F(tt.args.s, tt.args.f)
			assert.Equal(t, tt.want, got)
		})
	}
}
{{ end }}{{ end }}{{ end }}`))
